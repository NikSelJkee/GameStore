@page "/"
@page "/{pageIndex:int}"
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<IdentityUser> userManager
@inject IConfiguration configuration

@if (pagination == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <AuthorizeView Roles="Administrator">
        <Authorized>
            <a class="btn btn-primary" style="margin-bottom: 10px;" href="/createGame">Create a New Game</a>
        </Authorized>
    </AuthorizeView>

    <table class="table table-bordered">
        <thead>
            <tr class="text-center font-weight-bold">
                <td>Title</td>
                <td>Description</td>
                <td>PictureUrl</td>
                <td>Price</td>
                <td>Company</td>
                <td>Genre</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in pagination.Data)
            {
                <tr class="text-center">
                    <td>@game.Title</td>
                    <td>@game.Description</td>
                    <td>
                        <img height="100" width="200" src="@game.PictureUrl" />
                    </td>
                    <td>@game.Price.ToString("c")</td>
                    <td>@game.Company</td>
                    <td>@game.Genre</td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        @for (int i = 1; i <= pagination.Count / pagination.PageSize; i++)
        {
            <a href="/@i">@i</a>
        }
    </div>
}

@code{
    [Parameter]
    public int PageIndex { get; set; }

    private Pagination<GameToReturnDto> pagination;
    private HttpClient httpClient;

    protected override async Task OnParametersSetAsync()
    {
        await SetUpAuth();

        httpClient = new HttpClient();
        pagination = await httpClient.GetJsonAsync<Pagination<GameToReturnDto>>("http://localhost:5000/api/games?indexPage=" +
            ((PageIndex == 0) ? 1 : PageIndex));
    }

    private async Task SetUpAuth()
    {
        string[] roles = { "Administrator" };

        foreach (var role in roles)
        {
            var roleExist = await roleManager.RoleExistsAsync(role);

            if (roleExist == false)
            {
                await roleManager.CreateAsync(new IdentityRole(role));
            }
        }

        var user = await userManager.FindByEmailAsync(configuration["DefaultAdmin"]);

        if (user != null)
        {
            await userManager.AddToRoleAsync(user, "Administrator");
        }
    }
}