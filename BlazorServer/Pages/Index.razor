@page "/"
@page "/{pageIndex:int}"
@inject RoleManager<IdentityRole> RoleManager
@inject UserManager<IdentityUser> UserManager
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

@if (pagination == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2 class="text-primary">Game List</h2>

    <AuthorizeView Roles="Administrator">
        <Authorized>
            <a class="btn btn-primary" style="margin-bottom: 10px;" href="/createGame">Create a New Game</a>
        </Authorized>
    </AuthorizeView>


    <table class="table table-bordered">
        <thead>
            <tr class="text-center font-weight-bold">
                <td>Title</td>
                <td>Description</td>
                <td>Picture</td>
                <td>Price</td>
                <td>Company</td>
                <td>Genre</td>
                <AuthorizeView Roles="Administrator">
                    <Authorized>
                        <td></td>
                    </Authorized>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in pagination.Data)
            {
                <tr class="text-center">
                    <td>@game.Title</td>
                    <td>@game.Description</td>
                    <td>
                        <img height="100" width="200" src="@game.PictureUrl" />
                    </td>
                    <td>@(game.Price > 0.0M ? game.Price.ToString("c") : "FREE")</td>
                    <td>@game.Company</td>
                    <td>@game.Genre</td>
                    <AuthorizeView Roles="Administrator">
                        <Authorized>
                            <td>
                                <a class="btn btn-success form-control" href="/editGame/@game.Id">Edit</a>
                                <a class="btn btn-danger form-control text-white" href="#" style="margin-top: 10px" @onclick="(() => DeleteGame(game.Id))">Delete</a>
                            </td>
                        </Authorized>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <ul class="pagination">
            @for (int i = 1; i <= pageCount; i++)
            {
                <li class="page-item"><a class="page-link" href="/@i">@i</a></li>
            }
        </ul>
    </div>
}

@code{
    [Parameter]
    public int PageIndex { get; set; } = 1;

    private int pageCount = 0;
    private Pagination<GameToReturnDto> pagination;
    private HttpClient httpClient;

    protected override async Task OnParametersSetAsync()
    {
        await SetUpAuth();

        httpClient = new HttpClient();
        pagination = await httpClient.GetJsonAsync<Pagination<GameToReturnDto>>("http://localhost:5000/api/games?indexPage=" +
            ((PageIndex == 0) ? 1 : PageIndex));
        pageCount = (int)Math.Ceiling((decimal)pagination.Count / pagination.PageSize);
    }

    private async Task DeleteGame(int id)
    {
        await httpClient.DeleteAsync("http://localhost:5000/api/games/" + id);
        NavigationManager.NavigateTo($"/{PageIndex}", true);
    }

    private async Task SetUpAuth()
    {
        string[] roles = { "Administrator" };

        foreach (var role in roles)
        {
            var roleExist = await RoleManager.RoleExistsAsync(role);

            if (roleExist == false)
            {
                await RoleManager.CreateAsync(new IdentityRole(role));
            }
        }

        var admin = await UserManager.FindByEmailAsync(Configuration["DefaultAdmin"]);

        if (admin != null)
        {
            var adminRoles = await UserManager.GetRolesAsync(admin);

            if (!adminRoles.Contains("Administrator"))
            {
                await UserManager.AddToRoleAsync(admin, "Administrator");
            }
        }
    }
}